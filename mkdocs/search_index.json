{
    "docs": [
        {
            "location": "/",
            "text": "zend-barcode\n\n\n\n\n\n\nZend\\Barcode\n provides a generic way to generate barcodes. The \nZend\\Barcode\n\ncomponent is divided into two subcomponents: barcode objects and renderers.\nObjects allow you to create barcodes independently of the renderer. Renderer\nallow you to draw barcodes based on the support required.\n\n\n\n\nFile issues at https://github.com/zendframework/zend-barcode/issues\n\n\nDocumentation is at https://docs.zendframework.com/zend-barcode/",
            "title": "Home"
        },
        {
            "location": "/#zend-barcode",
            "text": "Zend\\Barcode  provides a generic way to generate barcodes. The  Zend\\Barcode \ncomponent is divided into two subcomponents: barcode objects and renderers.\nObjects allow you to create barcodes independently of the renderer. Renderer\nallow you to draw barcodes based on the support required.   File issues at https://github.com/zendframework/zend-barcode/issues  Documentation is at https://docs.zendframework.com/zend-barcode/",
            "title": "zend-barcode"
        },
        {
            "location": "/intro/",
            "text": "Introduction\n\n\nZend\\Barcode\\Barcode\n provides a generic way to generate barcodes. The\n\nZend\\Barcode\n component is divided into two subcomponents: barcode objects and\nrenderers. \nObjects\n allow you to create barcodes independently of the renderer.\n\nRenderers\n allow you to draw barcodes based on the target output.",
            "title": "Introduction"
        },
        {
            "location": "/intro/#introduction",
            "text": "Zend\\Barcode\\Barcode  provides a generic way to generate barcodes. The Zend\\Barcode  component is divided into two subcomponents: barcode objects and\nrenderers.  Objects  allow you to create barcodes independently of the renderer. Renderers  allow you to draw barcodes based on the target output.",
            "title": "Introduction"
        },
        {
            "location": "/usage/",
            "text": "Usage\n\n\nZend\\Barcode\\Barcode\n uses a factory method, \nfactory()\n, to create both an\ninstance of the barcode object to represent, and the renderer you will use to\ndraw it. (Barcode objects extend \nZend\\Barcode\\Object\\AbstractObject\n, and\nrenderers extend \nZend\\Barcode\\Renderer\\AbstractRenderer\n.) The \nfactory()\n\nmethod accepts five arguments:\n\n\n\n\nThe name of the barcode format (e.g., \"code39\") or a\n  \nTraversable\n object (required).\n\n\nThe name of the renderer (e.g., \"image\") (required).\n\n\nOptions to pass to the barcode object (an array or a\n  \nTraversable\n object) (optional).\n\n\nOptions to pass to the renderer object (an array or a\n  \nTraversable\n object) (optional).\n\n\nA boolean to indicate whether or not to automatically render errors. If an\n  exception occurs, the provided barcode object will be replaced with an error\n  representation (optional default \nTRUE\n).\n\n\n\n\nOn success, the factory method returns an instance of the renderer.\n\n\nGetting a Renderer with Zend\\Barcode\\Barcode::factory()\n\n\nZend\\Barcode\\Barcode::factory()\n instantiates both the barcode and renderer\ninstance, and binds them.\n\n\nIn this first example, we will use the \nCode39\n barcode type together with the\n\nImage\n renderer.\n\n\nuse Zend\\Barcode\\Barcode;\n\n// Only the text to draw is required.\n$barcodeOptions = ['text' => 'ZEND-FRAMEWORK'];\n\n// No required options.\n$rendererOptions = [];\n$renderer = Barcode::factory(\n    'code39',\n    'image',\n    $barcodeOptions,\n    $rendererOptions\n);\n\n\n\nUsing zend-config\n\n\nYou may pass a \nZend\\Config\\Config\n instance to the factory in order to create\nthe necessary objects. The following example is functionally equivalent to the\nprevious.\n\n\nuse Zend\\Config\\Config;\nuse Zend\\Barcode\\Barcode;\n\n// Using a single Zend\\Config\\Config object:\n$config = new Config([\n    'barcode'        => 'code39',\n    'barcodeParams'  => ['text' => 'ZEND-FRAMEWORK'],\n    'renderer'       => 'image',\n    'rendererParams' => ['imageType' => 'gif'],\n]);\n\n$renderer = Barcode::factory($config);\n\n\n\n\nDrawing a barcode\n\n\nWhen you \ndraw\n the barcode, you retrieve the resource in which the barcode is\ndrawn. To draw a barcode, call the \ndraw()\n of the renderer, or use the proxy\nmethod provided by \nZend\\Barcode\\Barcode\n.\n\n\nDrawing a barcode with the renderer object\n\n\nuse Zend\\Barcode\\Barcode;\n\n// Only the text to draw is required.\n$barcodeOptions = ['text' => 'ZEND-FRAMEWORK'];\n\n// No required options.\n$rendererOptions = [];\n\n// Draw the barcode, capturing the resource:\n$renderer = Barcode::factory(\n    'code39',\n    'image',\n    $barcodeOptions,\n    $rendererOptions\n);\n$imageResource = $renderer->draw();\n\n\n\n\nDrawing a barcode with Zend\\Barcode\\Barcode::draw()\n\n\nThe static \ndraw()\n method is a shortcut for calling \nfactory()\n + \ndraw()\n:\n\n\nuse Zend\\Barcode\\Barcode;\n\n// Only the text to draw is required.\n$barcodeOptions = ['text' => 'ZEND-FRAMEWORK'];\n\n// No required options.\n$rendererOptions = [];\n\n// Draw the barcode, capturing the resource:\n$imageResource = Barcode::draw(\n    'code39',\n    'image',\n    $barcodeOptions,\n    $rendererOptions\n);\n\n\n\n\nRendering a barcode\n\n\nIn the previous section, we were \ndrawing\n, which \nreturns\n the resource\nrepresenting the barcode, but does not actually \nemit\n it (e.g., to the\nbrowser).\n\n\nTo emit the barcode, call the \nrender()\n method of the renderer, or use\nthe proxy method provided by \nZend\\Barcode\\Barcode\n.\n\n\nRendering a barcode with the renderer object\n\n\nuse Zend\\Barcode\\Barcode;\n\n// Only the text to draw is required\n$barcodeOptions = ['text' => 'ZEND-FRAMEWORK'];\n\n// No required options\n$rendererOptions = [];\n\n// Draw the barcode, // send the headers, and emit the image:\nBarcode::factory(\n    'code39',\n    'image',\n    $barcodeOptions,\n    $rendererOptions\n)->render();\n\n\n\n\nThis will generate the following barcode:\n\n\n\n\nRendering a barcode with Zend\\Barcode\\Barcode::render()\n\n\nuse Zend\\Barcode\\Barcode;\n\n// Only the text to draw is required\n$barcodeOptions = ['text' => 'ZEND-FRAMEWORK'];\n\n// No required options\n$rendererOptions = [];\n\n// Draw the barcode, // send the headers, and emit the image:\nBarcode::render(\n    'code39',\n    'image',\n    $barcodeOptions,\n    $rendererOptions\n);\n\n\n\n\nThis will generate the same barcode as the previous example.",
            "title": "Usage"
        },
        {
            "location": "/usage/#usage",
            "text": "Zend\\Barcode\\Barcode  uses a factory method,  factory() , to create both an\ninstance of the barcode object to represent, and the renderer you will use to\ndraw it. (Barcode objects extend  Zend\\Barcode\\Object\\AbstractObject , and\nrenderers extend  Zend\\Barcode\\Renderer\\AbstractRenderer .) The  factory() \nmethod accepts five arguments:   The name of the barcode format (e.g., \"code39\") or a\n   Traversable  object (required).  The name of the renderer (e.g., \"image\") (required).  Options to pass to the barcode object (an array or a\n   Traversable  object) (optional).  Options to pass to the renderer object (an array or a\n   Traversable  object) (optional).  A boolean to indicate whether or not to automatically render errors. If an\n  exception occurs, the provided barcode object will be replaced with an error\n  representation (optional default  TRUE ).   On success, the factory method returns an instance of the renderer.",
            "title": "Usage"
        },
        {
            "location": "/usage/#getting-a-renderer-with-zend92barcode92barcodefactory",
            "text": "Zend\\Barcode\\Barcode::factory()  instantiates both the barcode and renderer\ninstance, and binds them.  In this first example, we will use the  Code39  barcode type together with the Image  renderer.  use Zend\\Barcode\\Barcode;\n\n// Only the text to draw is required.\n$barcodeOptions = ['text' => 'ZEND-FRAMEWORK'];\n\n// No required options.\n$rendererOptions = [];\n$renderer = Barcode::factory(\n    'code39',\n    'image',\n    $barcodeOptions,\n    $rendererOptions\n);",
            "title": "Getting a Renderer with Zend\\Barcode\\Barcode::factory()"
        },
        {
            "location": "/usage/#using-zend-config",
            "text": "You may pass a  Zend\\Config\\Config  instance to the factory in order to create\nthe necessary objects. The following example is functionally equivalent to the\nprevious.  use Zend\\Config\\Config;\nuse Zend\\Barcode\\Barcode;\n\n// Using a single Zend\\Config\\Config object:\n$config = new Config([\n    'barcode'        => 'code39',\n    'barcodeParams'  => ['text' => 'ZEND-FRAMEWORK'],\n    'renderer'       => 'image',\n    'rendererParams' => ['imageType' => 'gif'],\n]);\n\n$renderer = Barcode::factory($config);",
            "title": "Using zend-config"
        },
        {
            "location": "/usage/#drawing-a-barcode",
            "text": "When you  draw  the barcode, you retrieve the resource in which the barcode is\ndrawn. To draw a barcode, call the  draw()  of the renderer, or use the proxy\nmethod provided by  Zend\\Barcode\\Barcode .",
            "title": "Drawing a barcode"
        },
        {
            "location": "/usage/#drawing-a-barcode-with-the-renderer-object",
            "text": "use Zend\\Barcode\\Barcode;\n\n// Only the text to draw is required.\n$barcodeOptions = ['text' => 'ZEND-FRAMEWORK'];\n\n// No required options.\n$rendererOptions = [];\n\n// Draw the barcode, capturing the resource:\n$renderer = Barcode::factory(\n    'code39',\n    'image',\n    $barcodeOptions,\n    $rendererOptions\n);\n$imageResource = $renderer->draw();",
            "title": "Drawing a barcode with the renderer object"
        },
        {
            "location": "/usage/#drawing-a-barcode-with-zend92barcode92barcodedraw",
            "text": "The static  draw()  method is a shortcut for calling  factory()  +  draw() :  use Zend\\Barcode\\Barcode;\n\n// Only the text to draw is required.\n$barcodeOptions = ['text' => 'ZEND-FRAMEWORK'];\n\n// No required options.\n$rendererOptions = [];\n\n// Draw the barcode, capturing the resource:\n$imageResource = Barcode::draw(\n    'code39',\n    'image',\n    $barcodeOptions,\n    $rendererOptions\n);",
            "title": "Drawing a barcode with Zend\\Barcode\\Barcode::draw()"
        },
        {
            "location": "/usage/#rendering-a-barcode",
            "text": "In the previous section, we were  drawing , which  returns  the resource\nrepresenting the barcode, but does not actually  emit  it (e.g., to the\nbrowser).  To emit the barcode, call the  render()  method of the renderer, or use\nthe proxy method provided by  Zend\\Barcode\\Barcode .",
            "title": "Rendering a barcode"
        },
        {
            "location": "/usage/#rendering-a-barcode-with-the-renderer-object",
            "text": "use Zend\\Barcode\\Barcode;\n\n// Only the text to draw is required\n$barcodeOptions = ['text' => 'ZEND-FRAMEWORK'];\n\n// No required options\n$rendererOptions = [];\n\n// Draw the barcode, // send the headers, and emit the image:\nBarcode::factory(\n    'code39',\n    'image',\n    $barcodeOptions,\n    $rendererOptions\n)->render();  This will generate the following barcode:",
            "title": "Rendering a barcode with the renderer object"
        },
        {
            "location": "/usage/#rendering-a-barcode-with-zend92barcode92barcoderender",
            "text": "use Zend\\Barcode\\Barcode;\n\n// Only the text to draw is required\n$barcodeOptions = ['text' => 'ZEND-FRAMEWORK'];\n\n// No required options\n$rendererOptions = [];\n\n// Draw the barcode, // send the headers, and emit the image:\nBarcode::render(\n    'code39',\n    'image',\n    $barcodeOptions,\n    $rendererOptions\n);  This will generate the same barcode as the previous example.",
            "title": "Rendering a barcode with Zend\\Barcode\\Barcode::render()"
        },
        {
            "location": "/objects/",
            "text": "Barcode Objects\n\n\nBarcode objects allow you to generate barcodes independently of the rendering\nsupport. After generation, you can retrieve the barcode as an array of drawing\ninstructions to provide to a renderer.\n\n\nObjects have a large number of options, most of which are common across all\nimplementations. These options can be set in three ways:\n\n\n\n\nAs an array or a \nTraversable\n object passed to the constructor.\n\n\nAs an array passed to the \nsetOptions()\n method.\n\n\nVia individual setters for each configuration type.\n\n\n\n\nDifferent ways to parameterize a barcode object\n\n\nuse Zend\\Barcode\\Object;\n\n$options = ['text' => 'ZEND-FRAMEWORK', 'barHeight' => 40];\n\n// Case 1: constructor\n$barcode = new Object\\Code39($options);\n\n// Case 2: setOptions()\n$barcode = new Object\\Code39();\n$barcode->setOptions($options);\n\n// Case 3: individual setters\n$barcode = new Object\\Code39();\n$barcode->setText('ZEND-FRAMEWORK')\n    ->setBarHeight(40);\n\n\n\nCommon Options\n\n\nIn the following list, the values have no units; as such, we will use the\ngeneric term \"unit.\" For example, the default value of the \"thin bar\" is \"1\nunit\". The real units depend on the rendering support (see the [renderers\ndocumentation] (renderers.md) for more information).\n\n\nSetters are each named by uppercasing the initial letter of the option and\nprefixing the name with \"set\" (e.g. \nbarHeight\n becomes \nsetBarHeight\n). All\noptions have a corresponding getter prefixed with \"get\" (e.g. \ngetBarHeight\n).\n\n\nAvailable options are:\n\n\n\n\n\n\n\n\nOption\n\n\nData Type\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbarcodeNamespace\n\n\nstring\n\n\nZend\\Barcode\\Object\n\n\nNamespace of the barcode; for example, if you need to extend the embedding objects.\n\n\n\n\n\n\nbarHeight\n\n\nint\n\n\n50\n\n\nHeight of the bars.\n\n\n\n\n\n\nbarThickWidth\n\n\nint\n\n\n3\n\n\nWidth of the thick bar.\n\n\n\n\n\n\nbarThinWidth\n\n\nint\n\n\n1\n\n\nWidth of the thin bar.\n\n\n\n\n\n\nfactor\n\n\nint, float, string, or Bool\n\n\n1\n\n\nFactor by which to multiply bar widths and font sizes (\nbarHeight\n, \nbarThinWidth\n, \nbarThickWidth\n, and \nfontSize\n).\n\n\n\n\n\n\nforeColor\n\n\nint\n\n\n0x000000\n (black)\n\n\nColor of the bar and the text. Could be provided as an integer or as a HTML value (e.g. \n#333333\n).\n\n\n\n\n\n\nbackgroundColor\n\n\nint or string\n\n\n0xFFFFFF\n (white)\n\n\nColor of the background. Could be provided as an integer or as a HTML value (e.g. \n#333333\n).\n\n\n\n\n\n\norientation\n\n\nint, float, string, or Bool\n\n\n0\n\n\nOrientation of the barcode.\n\n\n\n\n\n\nfont\n\n\nstring or Int\n\n\nNULL\n\n\nFont path to a TTF font or a number between 1 and 5 if using image generation with GD (internal fonts).\n\n\n\n\n\n\nfontSize\n\n\nfloat\n\n\n10\n\n\nSize of the font (not applicable with numeric fonts).\n\n\n\n\n\n\nwithBorder\n\n\nbool\n\n\nFALSE\n\n\nDraw a border around the barcode and the quiet zones.\n\n\n\n\n\n\nwithQuietZones\n\n\nbool\n\n\nTRUE\n\n\nLeave a quiet zone before and after the barcode.\n\n\n\n\n\n\ndrawText\n\n\nbool\n\n\nTRUE\n\n\nSet if the text is displayed below the barcode.\n\n\n\n\n\n\nstretchText\n\n\nbool\n\n\nFALSE\n\n\nSpecify if the text is stretched all along the barcode.\n\n\n\n\n\n\nwithChecksum\n\n\nbool\n\n\nFALSE\n\n\nIndicate whether or not the checksum is automatically added to the barcode.\n\n\n\n\n\n\nwithChecksumInText\n\n\nbool\n\n\nFALSE\n\n\nIndicate whether or not the checksum is displayed in the textual representation.\n\n\n\n\n\n\ntext\n\n\nstring\n\n\nNULL\n\n\nThe text to represent as a barcode.\n\n\n\n\n\n\n\n\nSetting a common font for all objects\n\n\nYou can set a common font for all your objects by using the static method\n\nZend\\Barcode\\Barcode::setBarcodeFont()\n. This value can be always be overridden\nfor individual objects by using the \nsetFont()\n method.\n\n\nuse Zend\\Barcode\\Barcode;\n\n// In your bootstrap:\nBarcode::setBarcodeFont('my_font.ttf');\n\n// Later in your code:\nBarcode::render(\n    'code39',\n    'pdf',\n    ['text' => 'ZEND-FRAMEWORK']\n); // will use 'my_font.ttf'\n\n// or:\nBarcode::render(\n    'code39',\n    'image',\n    [\n        'text' => 'ZEND-FRAMEWORK',\n        'font' => 3,\n    ]\n); // will use the 3rd GD internal font\n\n\n\nCommon Additional Getters\n\n\n\n\n\n\n\n\nGetter\n\n\nData Type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngetType()\n\n\nstring\n\n\nReturn the name of the barcode class without the namespace (e.g. \nZend\\Barcode\\Object\\Code39\n returns simply \"code39\").\n\n\n\n\n\n\ngetRawText()\n\n\nstring\n\n\nReturn the original text provided to the object.\n\n\n\n\n\n\ngetTextToDisplay()\n\n\nstring\n\n\nReturn the text to display, including, if activated, the checksum value.\n\n\n\n\n\n\ngetQuietZone()\n\n\nint\n\n\nReturn the size of the space needed before and after the barcode without any drawing.\n\n\n\n\n\n\ngetInstructions()\n\n\narray\n\n\nReturn drawing instructions as an array..\n\n\n\n\n\n\ngetHeight($recalculate = false)\n\n\nint\n\n\nReturn the height of the barcode calculated after possible rotation.\n\n\n\n\n\n\ngetWidth($recalculate = false)\n\n\nint\n\n\nReturn the width of the barcode calculated after possible rotation.\n\n\n\n\n\n\ngetOffsetTop($recalculate = false)\n\n\nint\n\n\nReturn the position of the top of the barcode calculated after possible rotation.\n\n\n\n\n\n\ngetOffsetLeft($recalculate = false)\n\n\nint\n\n\nReturn the position of the left of the barcode calculated after possible rotation.\n\n\n\n\n\n\n\n\nDescription of shipped barcodes\n\n\nBelow is detailed information on all barcode types supported. Unless otherwise\nnoted, each barcode supports the general options outlined in the previous\nsection, and no others.\n\n\nZend\\Barcode\\Object\\Error\n\n\n\n\nThis barcode is a special case. It is internally used to automatically render an\nexception caught by the component.\n\n\nZend\\Barcode\\Object\\Code128\n\n\n\n\n\n\nName:\n Code 128\n\n\nAllowed characters:\n the complete ASCII-character set\n\n\nChecksum:\n optional (modulo 103)\n\n\nLength:\n variable\n\n\n\n\nZend\\Barcode\\Object\\Codabar\n\n\n\n\n\n\nName:\n Codabar (or Code 2 of 7)\n\n\nAllowed characters:\n \n0123456789-\\$:/.+\n with \nABCD\n as start and stop characters\n\n\nChecksum:\n none\n\n\nLength:\n variable\n\n\n\n\nZend\\Barcode\\Object\\Code25\n\n\n\n\n\n\nName:\n Code 25 (or Code 2 of 5 or Code 25 Industrial)\n\n\nAllowed characters:\n \n0123456789\n\n\nChecksum:\n optional (modulo 10)\n\n\nLength:\n variable\n\n\n\n\nZend\\Barcode\\Object\\Code25interleaved\n\n\n\n\nThis barcode extends \nZend\\Barcode\\Object\\Code25\n (Code 2 of 5), with the\nfollowing changes:\n\n\n\n\nName:\n Code 2 of 5 Interleaved\n\n\nAllowed characters:\n \n0123456789\n\n\nChecksum:\n optional (modulo 10)\n\n\nLength:\n variable (always even number of characters)\n\n\n\n\nIt also defines the following additional option:\n\n\n\n\n\n\n\n\nOption\n\n\nData Type\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwithBearerBars\n\n\nbool\n\n\nFALSE\n\n\nDraw a thick bar at the top and the bottom of the barcode.\n\n\n\n\n\n\n\n\nIf the number of characters is not even, \nZend\\Barcode\\Object\\Code25interleaved\n\nwill automatically prepend the missing zero to the barcode text.\n\n\nZend\\Barcode\\Object\\Ean2\n\n\n\n\nThis barcode extends \nZend\\Barcode\\Object\\Ean5\n (\nEAN\n 5), with the following\nchanges:\n\n\n\n\nName:\n \nEAN\n-2\n\n\nAllowed characters:\n \n0123456789\n\n\nChecksum:\n Used internally, but not displayed\n\n\nLength:\n 2 characters\n\n\n\n\nIf the number of characters is lower than 2, \nZend\\Barcode\\Object\\Ean2\n will\nautomatically prepend the missing zero to the barcode text.\n\n\nZend\\Barcode\\Object\\Ean5\n\n\n\n\nThis barcode extends \nZend\\Barcode\\Object\\Ean13\n (\nEAN\n 13), with the following\nchanges:\n\n\n\n\nName:\n \nEAN\n-5\n\n\nAllowed characters:\n \n0123456789\n\n\nChecksum:\n Used internally, but not displayed\n\n\nLength:\n 5 characters\n\n\n\n\nIf the number of characters is lower than 5, \nZend\\Barcode\\Object\\Ean5\n will\nautomatically prepend zeroes to the barcode text until it reaches 5 characters.\n\n\nZend\\Barcode\\Object\\Ean8\n\n\n\n\nThis barcode extends \nZend\\Barcode\\Object\\Ean13\n (\nEAN\n 13), with the following\nchanges:\n\n\n\n\nName:\n \nEAN\n-8\n\n\nAllowed characters:\n \n0123456789\n\n\nChecksum:\n mandatory (modulo 10)\n\n\nLength:\n 8 characters (including checksum)\n\n\n\n\nIf the number of characters is lower than 8, \nZend\\Barcode\\Object\\Ean8\n will\nautomatically prepend zeros to the barcode text until it reaches 8 characters.\n\n\nZend\\Barcode\\Object\\Ean13\n\n\n\n\n\n\nName:\n \nEAN\n-13\n\n\nAllowed characters:\n \n0123456789\n\n\nChecksum:\n mandatory (modulo 10)\n\n\nLength:\n 13 characters (including checksum)\n\n\n\n\nIf the number of characters is lower than 13, \nZend\\Barcode\\Object\\Ean13\n will\nautomatically prepend zeros to the barcode text until it reaches 13 characters.\n\n\nThe option \nwithQuietZones\n has no effect with this barcode.\n\n\nZend\\Barcode\\Object\\Code39\n\n\n\n\n\n\nName:\n Code 39\n\n\nAllowed characters:\n \n0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ -.\\$/+%\n\n\nChecksum:\n optional (modulo 43)\n\n\nLength:\n variable\n\n\n\n\nZend\\Barcode\\Object\\Code39\n automatically adds the start and stop characters\n(\n*\n) for you.\n\n\nZend\\Barcode\\Object\\Identcode\n\n\n\n\nThis barcode extends \nZend\\Barcode\\Object\\Code25interleaved\n (Code 2 of 5\nInterleaved), inheriting its capabilities and defining some of its own.\n\n\n\n\nName:\n Identcode (Deutsche Post Identcode)\n\n\nAllowed characters:\n \n0123456789\n\n\nChecksum:\n mandatory (modulo 10 different from Code25)\n\n\nLength:\n 12 characters (including checksum)\n\n\n\n\nIf the number of characters is lower than 12, \nZend\\Barcode\\Object\\Identcode\n\nwill automatically prepend missing zeros to the barcode text.\n\n\nZend\\Barcode\\Object\\Itf14\n\n\n\n\nThis barcode extends \nZend\\Barcode\\Object\\Code25interleaved\n (Code 2 of 5\nInterleaved), inheriting its capabilities and defining some of its own.\n\n\n\n\nName:\n \nITF\n-14\n\n\nAllowed characters:\n \n0123456789\n\n\nChecksum:\n mandatory (modulo 10)\n\n\nLength:\n 14 characters (including checksum)\n\n\n\n\nIf the number of characters is lower than 14, \nZend\\Barcode\\Object\\Itf14\n will\nautomatically prepend missing zeros to the barcode text.\n\n\nZend\\Barcode\\Object\\Leitcode\n\n\n\n\nThis barcode extends \nZend\\Barcode\\Object\\Identcode\n (Deutsche Post Identcode),\ninheriting its capabilities and defining some of its own:\n\n\n\n\nName:\n Leitcode (Deutsche Post Leitcode)\n\n\nAllowed characters:\n \n0123456789\n\n\nChecksum:\n mandatory (modulo 10 different from Code25)\n\n\nLength:\n 14 characters (including checksum)\n\n\n\n\nIf the number of characters is lower than 14, \nZend\\Barcode\\Object\\Leitcode\n\nwill automatically prepend missing zeros to the barcode text.\n\n\nZend\\Barcode\\Object\\Planet\n\n\n\n\n\n\nName:\n Planet (PostaL Alpha Numeric Encoding Technique)\n\n\nAllowed characters:\n \n0123456789\n\n\nChecksum:\n mandatory (modulo 10)\n\n\nLength:\n 12 or 14 characters (including checksum)\n\n\n\n\nZend\\Barcode\\Object\\Postnet\n\n\n\n\n\n\nName:\n Postnet (POSTal Numeric Encoding Technique)\n\n\nAllowed characters:\n \n0123456789\n\n\nChecksum:\n mandatory (modulo 10)\n\n\nLength:\n 6, 7, 10, or 12 characters (including checksum)\n\n\n\n\nZend\\Barcode\\Object\\Royalmail\n\n\n\n\n\n\nName:\n Royal Mail or \nRM4SCC\n (Royal Mail 4-State Customer Code)\n\n\nAllowed characters:\n \n0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\n\n\nChecksum:\n mandatory\n\n\nLength:\n variable\n\n\n\n\nZend\\Barcode\\Object\\Upca\n\n\n\n\nThis barcode extends \nZend\\Barcode\\Object\\Ean13\n (\nEAN\n-13), inheriting some of\nits capabilities and defining some of its own.\n\n\n\n\nName:\n \nUPC\n-A (Universal Product Code)\n\n\nAllowed characters:\n \n0123456789\n\n\nChecksum:\n mandatory (modulo 10)\n\n\nLength:\n 12 characters (including checksum)\n\n\n\n\nIf the number of characters is lower than 12, \nZend\\Barcode\\Object\\Upca\n will\nautomatically prepend missing zeros to the barcode text.\n\n\nThe option \nwithQuietZones\n has no effect with this barcode.\n\n\nZend\\Barcode\\Object\\Upce\n\n\n\n\nThis barcode extends \nZend\\Barcode\\Object\\Upca\n (\nUPC\n-A), inheriting some of\nits capabilities and defining some of its own. In particular, the first\ncharacter of the text to encode is the system (0 or 1).\n\n\n\n\nName:\n \nUPC\n-E (Universal Product Code)\n\n\nAllowed characters:\n \n0123456789\n\n\nChecksum:\n mandatory (modulo 10)\n\n\nLength:\n 8 characters (including checksum)\n\n\n\n\nIf the number of characters is lower than 8, \nZend\\Barcode\\Object\\Upce\n will\nautomatically prepend missing zeros to the barcode text.\n\n\nIf the first character of the text to encode is not 0 or 1, \nZend\\Barcode\\Object\\Upce\n will\nautomatically replace it with 0.\n\n\nThe option \nwithQuietZones\n has no effect with this barcode.",
            "title": "Barcode Objects"
        },
        {
            "location": "/objects/#barcode-objects",
            "text": "Barcode objects allow you to generate barcodes independently of the rendering\nsupport. After generation, you can retrieve the barcode as an array of drawing\ninstructions to provide to a renderer.  Objects have a large number of options, most of which are common across all\nimplementations. These options can be set in three ways:   As an array or a  Traversable  object passed to the constructor.  As an array passed to the  setOptions()  method.  Via individual setters for each configuration type.",
            "title": "Barcode Objects"
        },
        {
            "location": "/objects/#different-ways-to-parameterize-a-barcode-object",
            "text": "use Zend\\Barcode\\Object;\n\n$options = ['text' => 'ZEND-FRAMEWORK', 'barHeight' => 40];\n\n// Case 1: constructor\n$barcode = new Object\\Code39($options);\n\n// Case 2: setOptions()\n$barcode = new Object\\Code39();\n$barcode->setOptions($options);\n\n// Case 3: individual setters\n$barcode = new Object\\Code39();\n$barcode->setText('ZEND-FRAMEWORK')\n    ->setBarHeight(40);",
            "title": "Different ways to parameterize a barcode object"
        },
        {
            "location": "/objects/#common-options",
            "text": "In the following list, the values have no units; as such, we will use the\ngeneric term \"unit.\" For example, the default value of the \"thin bar\" is \"1\nunit\". The real units depend on the rendering support (see the [renderers\ndocumentation] (renderers.md) for more information).  Setters are each named by uppercasing the initial letter of the option and\nprefixing the name with \"set\" (e.g.  barHeight  becomes  setBarHeight ). All\noptions have a corresponding getter prefixed with \"get\" (e.g.  getBarHeight ).  Available options are:     Option  Data Type  Default Value  Description      barcodeNamespace  string  Zend\\Barcode\\Object  Namespace of the barcode; for example, if you need to extend the embedding objects.    barHeight  int  50  Height of the bars.    barThickWidth  int  3  Width of the thick bar.    barThinWidth  int  1  Width of the thin bar.    factor  int, float, string, or Bool  1  Factor by which to multiply bar widths and font sizes ( barHeight ,  barThinWidth ,  barThickWidth , and  fontSize ).    foreColor  int  0x000000  (black)  Color of the bar and the text. Could be provided as an integer or as a HTML value (e.g.  #333333 ).    backgroundColor  int or string  0xFFFFFF  (white)  Color of the background. Could be provided as an integer or as a HTML value (e.g.  #333333 ).    orientation  int, float, string, or Bool  0  Orientation of the barcode.    font  string or Int  NULL  Font path to a TTF font or a number between 1 and 5 if using image generation with GD (internal fonts).    fontSize  float  10  Size of the font (not applicable with numeric fonts).    withBorder  bool  FALSE  Draw a border around the barcode and the quiet zones.    withQuietZones  bool  TRUE  Leave a quiet zone before and after the barcode.    drawText  bool  TRUE  Set if the text is displayed below the barcode.    stretchText  bool  FALSE  Specify if the text is stretched all along the barcode.    withChecksum  bool  FALSE  Indicate whether or not the checksum is automatically added to the barcode.    withChecksumInText  bool  FALSE  Indicate whether or not the checksum is displayed in the textual representation.    text  string  NULL  The text to represent as a barcode.",
            "title": "Common Options"
        },
        {
            "location": "/objects/#setting-a-common-font-for-all-objects",
            "text": "You can set a common font for all your objects by using the static method Zend\\Barcode\\Barcode::setBarcodeFont() . This value can be always be overridden\nfor individual objects by using the  setFont()  method.  use Zend\\Barcode\\Barcode;\n\n// In your bootstrap:\nBarcode::setBarcodeFont('my_font.ttf');\n\n// Later in your code:\nBarcode::render(\n    'code39',\n    'pdf',\n    ['text' => 'ZEND-FRAMEWORK']\n); // will use 'my_font.ttf'\n\n// or:\nBarcode::render(\n    'code39',\n    'image',\n    [\n        'text' => 'ZEND-FRAMEWORK',\n        'font' => 3,\n    ]\n); // will use the 3rd GD internal font",
            "title": "Setting a common font for all objects"
        },
        {
            "location": "/objects/#common-additional-getters",
            "text": "Getter  Data Type  Description      getType()  string  Return the name of the barcode class without the namespace (e.g.  Zend\\Barcode\\Object\\Code39  returns simply \"code39\").    getRawText()  string  Return the original text provided to the object.    getTextToDisplay()  string  Return the text to display, including, if activated, the checksum value.    getQuietZone()  int  Return the size of the space needed before and after the barcode without any drawing.    getInstructions()  array  Return drawing instructions as an array..    getHeight($recalculate = false)  int  Return the height of the barcode calculated after possible rotation.    getWidth($recalculate = false)  int  Return the width of the barcode calculated after possible rotation.    getOffsetTop($recalculate = false)  int  Return the position of the top of the barcode calculated after possible rotation.    getOffsetLeft($recalculate = false)  int  Return the position of the left of the barcode calculated after possible rotation.",
            "title": "Common Additional Getters"
        },
        {
            "location": "/objects/#description-of-shipped-barcodes",
            "text": "Below is detailed information on all barcode types supported. Unless otherwise\nnoted, each barcode supports the general options outlined in the previous\nsection, and no others.",
            "title": "Description of shipped barcodes"
        },
        {
            "location": "/objects/#zend92barcode92object92error",
            "text": "This barcode is a special case. It is internally used to automatically render an\nexception caught by the component.",
            "title": "Zend\\Barcode\\Object\\Error"
        },
        {
            "location": "/objects/#zend92barcode92object92code128",
            "text": "Name:  Code 128  Allowed characters:  the complete ASCII-character set  Checksum:  optional (modulo 103)  Length:  variable",
            "title": "Zend\\Barcode\\Object\\Code128"
        },
        {
            "location": "/objects/#zend92barcode92object92codabar",
            "text": "Name:  Codabar (or Code 2 of 7)  Allowed characters:   0123456789-\\$:/.+  with  ABCD  as start and stop characters  Checksum:  none  Length:  variable",
            "title": "Zend\\Barcode\\Object\\Codabar"
        },
        {
            "location": "/objects/#zend92barcode92object92code25",
            "text": "Name:  Code 25 (or Code 2 of 5 or Code 25 Industrial)  Allowed characters:   0123456789  Checksum:  optional (modulo 10)  Length:  variable",
            "title": "Zend\\Barcode\\Object\\Code25"
        },
        {
            "location": "/objects/#zend92barcode92object92code25interleaved",
            "text": "This barcode extends  Zend\\Barcode\\Object\\Code25  (Code 2 of 5), with the\nfollowing changes:   Name:  Code 2 of 5 Interleaved  Allowed characters:   0123456789  Checksum:  optional (modulo 10)  Length:  variable (always even number of characters)   It also defines the following additional option:     Option  Data Type  Default Value  Description      withBearerBars  bool  FALSE  Draw a thick bar at the top and the bottom of the barcode.     If the number of characters is not even,  Zend\\Barcode\\Object\\Code25interleaved \nwill automatically prepend the missing zero to the barcode text.",
            "title": "Zend\\Barcode\\Object\\Code25interleaved"
        },
        {
            "location": "/objects/#zend92barcode92object92ean2",
            "text": "This barcode extends  Zend\\Barcode\\Object\\Ean5  ( EAN  5), with the following\nchanges:   Name:   EAN -2  Allowed characters:   0123456789  Checksum:  Used internally, but not displayed  Length:  2 characters   If the number of characters is lower than 2,  Zend\\Barcode\\Object\\Ean2  will\nautomatically prepend the missing zero to the barcode text.",
            "title": "Zend\\Barcode\\Object\\Ean2"
        },
        {
            "location": "/objects/#zend92barcode92object92ean5",
            "text": "This barcode extends  Zend\\Barcode\\Object\\Ean13  ( EAN  13), with the following\nchanges:   Name:   EAN -5  Allowed characters:   0123456789  Checksum:  Used internally, but not displayed  Length:  5 characters   If the number of characters is lower than 5,  Zend\\Barcode\\Object\\Ean5  will\nautomatically prepend zeroes to the barcode text until it reaches 5 characters.",
            "title": "Zend\\Barcode\\Object\\Ean5"
        },
        {
            "location": "/objects/#zend92barcode92object92ean8",
            "text": "This barcode extends  Zend\\Barcode\\Object\\Ean13  ( EAN  13), with the following\nchanges:   Name:   EAN -8  Allowed characters:   0123456789  Checksum:  mandatory (modulo 10)  Length:  8 characters (including checksum)   If the number of characters is lower than 8,  Zend\\Barcode\\Object\\Ean8  will\nautomatically prepend zeros to the barcode text until it reaches 8 characters.",
            "title": "Zend\\Barcode\\Object\\Ean8"
        },
        {
            "location": "/objects/#zend92barcode92object92ean13",
            "text": "Name:   EAN -13  Allowed characters:   0123456789  Checksum:  mandatory (modulo 10)  Length:  13 characters (including checksum)   If the number of characters is lower than 13,  Zend\\Barcode\\Object\\Ean13  will\nautomatically prepend zeros to the barcode text until it reaches 13 characters.  The option  withQuietZones  has no effect with this barcode.",
            "title": "Zend\\Barcode\\Object\\Ean13"
        },
        {
            "location": "/objects/#zend92barcode92object92code39",
            "text": "Name:  Code 39  Allowed characters:   0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ -.\\$/+%  Checksum:  optional (modulo 43)  Length:  variable   Zend\\Barcode\\Object\\Code39  automatically adds the start and stop characters\n( * ) for you.",
            "title": "Zend\\Barcode\\Object\\Code39"
        },
        {
            "location": "/objects/#zend92barcode92object92identcode",
            "text": "This barcode extends  Zend\\Barcode\\Object\\Code25interleaved  (Code 2 of 5\nInterleaved), inheriting its capabilities and defining some of its own.   Name:  Identcode (Deutsche Post Identcode)  Allowed characters:   0123456789  Checksum:  mandatory (modulo 10 different from Code25)  Length:  12 characters (including checksum)   If the number of characters is lower than 12,  Zend\\Barcode\\Object\\Identcode \nwill automatically prepend missing zeros to the barcode text.",
            "title": "Zend\\Barcode\\Object\\Identcode"
        },
        {
            "location": "/objects/#zend92barcode92object92itf14",
            "text": "This barcode extends  Zend\\Barcode\\Object\\Code25interleaved  (Code 2 of 5\nInterleaved), inheriting its capabilities and defining some of its own.   Name:   ITF -14  Allowed characters:   0123456789  Checksum:  mandatory (modulo 10)  Length:  14 characters (including checksum)   If the number of characters is lower than 14,  Zend\\Barcode\\Object\\Itf14  will\nautomatically prepend missing zeros to the barcode text.",
            "title": "Zend\\Barcode\\Object\\Itf14"
        },
        {
            "location": "/objects/#zend92barcode92object92leitcode",
            "text": "This barcode extends  Zend\\Barcode\\Object\\Identcode  (Deutsche Post Identcode),\ninheriting its capabilities and defining some of its own:   Name:  Leitcode (Deutsche Post Leitcode)  Allowed characters:   0123456789  Checksum:  mandatory (modulo 10 different from Code25)  Length:  14 characters (including checksum)   If the number of characters is lower than 14,  Zend\\Barcode\\Object\\Leitcode \nwill automatically prepend missing zeros to the barcode text.",
            "title": "Zend\\Barcode\\Object\\Leitcode"
        },
        {
            "location": "/objects/#zend92barcode92object92planet",
            "text": "Name:  Planet (PostaL Alpha Numeric Encoding Technique)  Allowed characters:   0123456789  Checksum:  mandatory (modulo 10)  Length:  12 or 14 characters (including checksum)",
            "title": "Zend\\Barcode\\Object\\Planet"
        },
        {
            "location": "/objects/#zend92barcode92object92postnet",
            "text": "Name:  Postnet (POSTal Numeric Encoding Technique)  Allowed characters:   0123456789  Checksum:  mandatory (modulo 10)  Length:  6, 7, 10, or 12 characters (including checksum)",
            "title": "Zend\\Barcode\\Object\\Postnet"
        },
        {
            "location": "/objects/#zend92barcode92object92royalmail",
            "text": "Name:  Royal Mail or  RM4SCC  (Royal Mail 4-State Customer Code)  Allowed characters:   0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ  Checksum:  mandatory  Length:  variable",
            "title": "Zend\\Barcode\\Object\\Royalmail"
        },
        {
            "location": "/objects/#zend92barcode92object92upca",
            "text": "This barcode extends  Zend\\Barcode\\Object\\Ean13  ( EAN -13), inheriting some of\nits capabilities and defining some of its own.   Name:   UPC -A (Universal Product Code)  Allowed characters:   0123456789  Checksum:  mandatory (modulo 10)  Length:  12 characters (including checksum)   If the number of characters is lower than 12,  Zend\\Barcode\\Object\\Upca  will\nautomatically prepend missing zeros to the barcode text.  The option  withQuietZones  has no effect with this barcode.",
            "title": "Zend\\Barcode\\Object\\Upca"
        },
        {
            "location": "/objects/#zend92barcode92object92upce",
            "text": "This barcode extends  Zend\\Barcode\\Object\\Upca  ( UPC -A), inheriting some of\nits capabilities and defining some of its own. In particular, the first\ncharacter of the text to encode is the system (0 or 1).   Name:   UPC -E (Universal Product Code)  Allowed characters:   0123456789  Checksum:  mandatory (modulo 10)  Length:  8 characters (including checksum)   If the number of characters is lower than 8,  Zend\\Barcode\\Object\\Upce  will\nautomatically prepend missing zeros to the barcode text.  If the first character of the text to encode is not 0 or 1,  Zend\\Barcode\\Object\\Upce  will\nautomatically replace it with 0.  The option  withQuietZones  has no effect with this barcode.",
            "title": "Zend\\Barcode\\Object\\Upce"
        },
        {
            "location": "/renderers/",
            "text": "Barcode Renderers\n\n\nRenderers support options, most of which are common across all implementations.\nThese options can be set in three ways:\n\n\n\n\nAs an array or a \nTraversable\n object passed to the constructor.\n\n\nAs an array passed to the \nsetOptions()\n method.\n\n\nAs discrete values passed to individual setters.\n\n\n\n\nDifferent ways to parameterize a renderer object\n\n\nuse Zend\\Barcode\\Renderer;\n\n$options = ['topOffset' => 10];\n\n// Case 1\n$renderer = new Renderer\\Pdf($options);\n\n// Case 2\n$renderer = new Renderer\\Pdf();\n$renderer->setOptions($options);\n\n// Case 3\n$renderer = new Renderer\\Pdf();\n$renderer->setTopOffset(10);\n\n\n\nCommon Options\n\n\nIn the following list, the values have no units; as such, we will use the\ngeneric term \"unit.\" For example, the default value of the \"thin bar\" is \"1\nunit.\" The real units depend on the rendering support.\n\n\nThe individual setters are obtained by uppercasing the initial letter of the\noption and prefixing the name with \"set\" (e.g. \nbarHeight\n becomes\n\nsetBarHeight\n). All options have a correspondent getter prefixed with \"get\"\n(e.g. \ngetBarHeight\n).\n\n\nAvailable options are:\n\n\n\n\n\n\n\n\nOption\n\n\nData Type\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrendererNamespace\n\n\nstring\n\n\nZend\\Barcode\\Renderer\n\n\nNamespace of the renderer; for example, if you need to extend the renderers.\n\n\n\n\n\n\nhorizontalPosition\n\n\nstring\n\n\n\"left\"\n\n\nCan be \"left\", \"center\" or \"right\". Can be useful with PDF or if the \nsetWidth()\n method is used with an image renderer.\n\n\n\n\n\n\nverticalPosition\n\n\nstring\n\n\n\"top\"\n\n\nCan be \"top\", \"middle\" or \"bottom\". Can be useful with PDF or if the \nsetHeight()\n method is used with an image renderer.\n\n\n\n\n\n\nleftOffset\n\n\nint\n\n\n0\n\n\nTop position of the barcode inside the renderer. If used, this value will override the \nhorizontalPosition\n option.\n\n\n\n\n\n\ntopOffset\n\n\nint\n\n\n0\n\n\nTop position of the barcode inside the renderer. If used, this value will override the \nverticalPosition\n option.\n\n\n\n\n\n\nautomaticRenderError\n\n\nbool\n\n\nFALSE\n\n\nWhether or not to automatically render errors. If an exception occurs, the provided barcode object will be replaced with an \nError\n representation. Note that some errors (or exceptions) can not be rendered.\n\n\n\n\n\n\nmoduleSize\n\n\nfloat\n\n\n1\n\n\nSize of a rendering module in the support.\n\n\n\n\n\n\nbarcode\n\n\nZend\\Barcode\\Object\n\n\nNULL\n\n\nThe barcode object to render.\n\n\n\n\n\n\n\n\nAn additional getter exists: \ngetType()\n. It returns the name of the renderer\nclass without the namespace (e.g.  \nZend\\Barcode\\Renderer\\Image\n returns\n\"image\").\n\n\nZend\\Barcode\\Renderer\\Image\n\n\nThe image renderer will draw the instruction list of the barcode object in an\nimage resource.  The default width of a module is 1 pixel.\n\n\n\n\nGD extension required\n\n\nThe GD extension is required for the image renderer.\n\n\n\n\nAvailable options are:\n\n\n\n\n\n\n\n\nOption\n\n\nData Type\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nheight\n\n\nint\n\n\n0\n\n\nAllow you to specify the height of the result image. If \"0\", the height will be calculated by the barcode object.\n\n\n\n\n\n\nwidth\n\n\nint\n\n\n0\n\n\nAllow you to specify the width of the result image. If \"0\", the width will be calculated by the barcode object.\n\n\n\n\n\n\nimageType\n\n\nstring\n\n\n\"png\"\n\n\nSpecify the image format. Can be \"png\", \"jpeg\", \"jpg\" or \"gif\".\n\n\n\n\n\n\n\n\nZend\\Barcode\\Renderer\\Pdf\n\n\nThe PDF renderer will draw the instruction list of the barcode object in a PDF\ndocument. The default width of a module is 0.5 point.\n\n\nThere are no additional options for this renderer.",
            "title": "Renderers"
        },
        {
            "location": "/renderers/#barcode-renderers",
            "text": "Renderers support options, most of which are common across all implementations.\nThese options can be set in three ways:   As an array or a  Traversable  object passed to the constructor.  As an array passed to the  setOptions()  method.  As discrete values passed to individual setters.",
            "title": "Barcode Renderers"
        },
        {
            "location": "/renderers/#different-ways-to-parameterize-a-renderer-object",
            "text": "use Zend\\Barcode\\Renderer;\n\n$options = ['topOffset' => 10];\n\n// Case 1\n$renderer = new Renderer\\Pdf($options);\n\n// Case 2\n$renderer = new Renderer\\Pdf();\n$renderer->setOptions($options);\n\n// Case 3\n$renderer = new Renderer\\Pdf();\n$renderer->setTopOffset(10);",
            "title": "Different ways to parameterize a renderer object"
        },
        {
            "location": "/renderers/#common-options",
            "text": "In the following list, the values have no units; as such, we will use the\ngeneric term \"unit.\" For example, the default value of the \"thin bar\" is \"1\nunit.\" The real units depend on the rendering support.  The individual setters are obtained by uppercasing the initial letter of the\noption and prefixing the name with \"set\" (e.g.  barHeight  becomes setBarHeight ). All options have a correspondent getter prefixed with \"get\"\n(e.g.  getBarHeight ).  Available options are:     Option  Data Type  Default Value  Description      rendererNamespace  string  Zend\\Barcode\\Renderer  Namespace of the renderer; for example, if you need to extend the renderers.    horizontalPosition  string  \"left\"  Can be \"left\", \"center\" or \"right\". Can be useful with PDF or if the  setWidth()  method is used with an image renderer.    verticalPosition  string  \"top\"  Can be \"top\", \"middle\" or \"bottom\". Can be useful with PDF or if the  setHeight()  method is used with an image renderer.    leftOffset  int  0  Top position of the barcode inside the renderer. If used, this value will override the  horizontalPosition  option.    topOffset  int  0  Top position of the barcode inside the renderer. If used, this value will override the  verticalPosition  option.    automaticRenderError  bool  FALSE  Whether or not to automatically render errors. If an exception occurs, the provided barcode object will be replaced with an  Error  representation. Note that some errors (or exceptions) can not be rendered.    moduleSize  float  1  Size of a rendering module in the support.    barcode  Zend\\Barcode\\Object  NULL  The barcode object to render.     An additional getter exists:  getType() . It returns the name of the renderer\nclass without the namespace (e.g.   Zend\\Barcode\\Renderer\\Image  returns\n\"image\").",
            "title": "Common Options"
        },
        {
            "location": "/renderers/#zend92barcode92renderer92image",
            "text": "The image renderer will draw the instruction list of the barcode object in an\nimage resource.  The default width of a module is 1 pixel.",
            "title": "Zend\\Barcode\\Renderer\\Image"
        },
        {
            "location": "/renderers/#gd-extension-required",
            "text": "The GD extension is required for the image renderer.   Available options are:     Option  Data Type  Default Value  Description      height  int  0  Allow you to specify the height of the result image. If \"0\", the height will be calculated by the barcode object.    width  int  0  Allow you to specify the width of the result image. If \"0\", the width will be calculated by the barcode object.    imageType  string  \"png\"  Specify the image format. Can be \"png\", \"jpeg\", \"jpg\" or \"gif\".",
            "title": "GD extension required"
        },
        {
            "location": "/renderers/#zend92barcode92renderer92pdf",
            "text": "The PDF renderer will draw the instruction list of the barcode object in a PDF\ndocument. The default width of a module is 0.5 point.  There are no additional options for this renderer.",
            "title": "Zend\\Barcode\\Renderer\\Pdf"
        }
    ]
}